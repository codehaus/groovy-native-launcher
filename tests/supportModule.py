# -*- mode:python; coding:utf-8; -*-
# jedit: :mode=python:

#  Groovy -- A native launcher for Groovy
#
#  Copyright Â© 2008-9 Russel Winder
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
#  compliance with the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software distributed under the License is
#  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#  implied. See the License for the specific language governing permissions and limitations under the
#  License.

import os
import re
import tempfile
import unittest
from glob import glob

#  Temporary file names generated by Python can contain characters that are not permitted as Java class
#  names.  This function generates temporary files that are compatible.

def javaNameCompatibleTemporaryFile ( ) :
    while True :
        file = tempfile.NamedTemporaryFile ( )
        if re.compile ( '[-]' ).search ( file.name ) == None : break
        file.close ( )
    return file

#  Execute a command returning a tuple of the return value and the output.  On Posix-compliant systems the
#  return value is an amalgam of signal and return code.  Fortunately we know that the signal is in the low
#  byte and the return value in the next byte.

def executeCommand ( command , prefixCommand = '' ) :
    commandLine = ( prefixCommand + ' ' if prefixCommand else '' ) +  executablePath + ' ' + command
#    print "executing: " + commandLine
    process = os.popen ( commandLine )
    output = process.read ( ).strip ( )
    returnCode = process.close ( )
    if returnCode != None :
        #  Posix-compliant platforms fiddle with the sub-process return code.
        if platform in [ 'posix' , 'darwin' , 'sunos' , 'cygwin' ] :
            returnCode >>= 8
    return ( returnCode , output )

#  The standard SCons entry.

def runTests ( path , architecture , testClass ) :
    global executablePath
    executablePath = path
    global platform
    platform = architecture
    if os.environ['xmlOutputRequired'] == 'True' :
        resultsDirectory = os.environ['xmlTestOutputDirectory']
        if not os.path.exists ( resultsDirectory ) : os.mkdir ( resultsDirectory )
        outputFile = file ( os.path.join ( resultsDirectory , 'TEST-' + testClass.__name__ + '.xml' ) , 'w' )
        #  Shouldn't have to do this next bit, it should be done for us but isn't :-(
        outputFile.write('<?xml version="1.0" encoding="utf-8"?>\n')
        try :
            import xmltestrunner , glob
            testrunner = xmltestrunner.XMLTestRunner ( outputFile )
            returnCode = testrunner.run ( unittest.defaultTestLoader.loadTestsFromTestCase ( testClass ) ).wasSuccessful ( )
        finally :
            outputFile.close ( )
    else :
        returnCode = unittest.TextTestRunner ( ).run ( unittest.defaultTestLoader.loadTestsFromTestCase ( testClass ) ).wasSuccessful ( )
    return returnCode


def findCFilesWithMain( dir = '.' ) :
    mainFiles = [ ]
    mainFunctionPattern = re.compile ( 'int\s+main\s*\(' )
    for f in glob ( dir + '/*.c' ) :
        theFile = file ( str ( f ) )
        try:
            theText = theFile.read ( )
        except IOError :
            print '########  Error reading' , str ( f )
        else :
            if mainFunctionPattern.search ( theText ) : mainFiles.append ( f )
        finally :
            theFile.close () 
    return mainFiles

def findCFilesWithoutMain( dir = '.' ) :
    mainFiles = findCFilesWithMain( dir )
    files = glob ( dir + '/*.c' )
    for f in mainFiles :
        files.remove( f )
    return files 

# Windows specific issue:
# Having _DEBUG will cause Python.h to try to use python26_d.lib which is not included
# in Python installer and thus the build fails. See e.g. 
#   http://old.nabble.com/please-include-python26_d.lib-in-the-installer-td22737890.html
#  http://old.nabble.com/MUD-Game-Programmming---Python-Modules-in-C%2B%2B-td25880983.html#a25882369
# for discussion on the topic. For some reason there is no issue about it in the 
# Python bug tracker.
# 
# From MSDN docs: "The compiler defines _DEBUG when you specify the /MTd or /MDd option."
# Thus, to be able to perform a debug test build, we need to either:
#   * modify %PYTHON_HOME%\Include\pyconfig.h so python26.lib will be used instead of python26_d.lib
#   * compile ourselves a debug version of Python
#   * surround the #include <Python.h> in our source with #ifdef _DEBUG #undef _DEBUG #include <Python.h> style construct (see impl below)
# Of these options, the last one is the least intrusive and requires least hassle. 

# cfile needs to be opened and have write permissions. This func will not close it.
def surroundPythonHIncludeWithGuards( cfile ) :
    cfile.seek( 0 )
    lines = cfile.readlines()
    linenrOfPythonH = None
    try : 
      linenrOfPythonH = lines.index( '#include <Python.h>\n' )
    except ValueError : return
    
    if ( lines[ linenrOfPythonH - 2 ] == "#  undef _DEBUG\n" ) : return

    post = [ 
      "#if defined( _DEBUG_WAS_DEFINED )\n",
      "#  define _DEBUG\n",
      "#endif\n" ]
    post.reverse()

    for line in post : lines.insert( linenrOfPythonH + 1, line )

    pre = [ 
      "#if defined( _DEBUG )\n",
      "#  define _DEBUG_WAS_DEFINED\n",
      "#  undef _DEBUG\n",
      "#endif\n" ]
    pre.reverse()
    for line in pre : lines.insert( linenrOfPythonH, line )    

    cfile.truncate( 0 )
    cfile.seek( 0 )
    cfile.writelines( lines )

if __name__ == '__main__' :
    print 'Run tests using command "scons test".'
    
    
    
