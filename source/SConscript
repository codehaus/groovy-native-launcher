# -*- mode:python; coding:utf-8; -*-
# jedit: :mode=python:

#  Groovy -- A native launcher for Groovy
#
#  Copyright Â© 2007-10 Russel Winder
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
#  compliance with the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software distributed under the License is
#  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#  implied. See the License for the specific language governing permissions and limitations under the
#  License.
#
#  Author : Russel Winder <russel.winder@concertant.com>

import re

Import ( 'environment' , 'swigEnvironment' )

#  Search for any file with what appears to be a main function and assume that file is the main file of an
#  application to be built.  Assume all other source files should be compiled and linked with each of the
#  main files.  Return a list of all the executables made.

cFiles = Glob ( '*.c' )
mainFunctionPattern = re.compile ( 'int\s+main\s*\(' )
mainFiles = [ ]
for f in cFiles :
    with file ( str ( f ) ) as theFile :
        theText = theFile.read ( )
        if mainFunctionPattern.search ( theText ) : mainFiles.append ( f.name )

otherSources =  [ f.name for f in cFiles if ( f.name not in mainFiles ) and f.name != 'nativelauncher_wrap.c' ]
otherStaticObjects = [ environment.Object ( s ) for s in otherSources ]

executables = [ ]
for name in mainFiles :
    root = name.replace ( '.c' , '' )
    if environment['PLATFORM'] in [ 'win32' , 'cygwin' ] :
        Import ( 'windowsEnvironment' )
        objects = [ environment.Object ( name ) ] + otherStaticObjects
        #  SCons does not provide the RES builder for the Cygwin toolchain. cf. Scons Bug 2077.
        if environment['PLATFORM'] == 'cygwin' :
            resources = environment.Command ( name + '.coff' , root + '.rc' , 'windres $SOURCES -I source -O coff $TARGET' )
        else :
            resources = environment.RES ( target = root + '.coff' , source = root + '.rc' )
        executables += [
            environment.Program ( root + '.exe' , objects + [ resources ] ) ,
            windowsEnvironment.Program ( root + 'w.exe' , objects + [ resources ] )
            ]
    else :
        executables += environment.Program ( root , [ name ] + otherStaticObjects )

if environment['PLATFORM'] in [ 'win32' , 'cygwin' ] :
    sharedLibrary = swigEnvironment.SharedLibrary ( '_nativelauncher' , otherStaticObjects + [ 'nativelauncher.i' ] )
else :
    sharedLibrary = swigEnvironment.SharedLibrary ( '_nativelauncher' , otherSources + [ 'nativelauncher.i' ] )

returnValue = ( executables , sharedLibrary )

Return ( 'returnValue' )
