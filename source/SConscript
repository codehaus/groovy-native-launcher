# -*- mode:python; coding:utf-8; -*-
# jedit: :mode=python:

#  Groovy -- A native launcher for Groovy
#
#  Copyright Â© 2007-10 Russel Winder
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
#  compliance with the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software distributed under the License is
#  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#  implied. See the License for the specific language governing permissions and limitations under the
#  License.
#
#  Author : Russel Winder <russel.winder@concertant.com>

#### As at 2010-03-18 11:15+00:00 Cygwin uses Python 2.5 which means we cannot use the with statement
#### without using the __future__ package.  Fortunately this is a no-op in Python 2.6 and later.

from __future__ import with_statement

import re

Import ( 'environment' , 'swigEnvironment' )

#  Statically linked executables are created for each file containing a main.  Search for any file with what
#  appears to be a main function and assume that file is the main file of an application to be built.
#  Assume all other source files should be compiled and linked with each of the main files.  Return a tuple
#  of all the executables made.  The only complexity is that for Windows two executables are created for
#  each main one for command line use the other for Windows use.
#
#  The real complexity for the build is that in order to use Python to write the test code, shared objects
#  (dynamic link libraries, DLLs, on Windows) have to be prepared.  Posix systems compile without -fPIC for
#  static systems and with -fPIC for shared objects.  The names of the object files are different in these
#  cases so there is no conflict.  SCons knows how to do the right thing.  For Windows the same object files
#  (with the same name) are used to create the statically linked executable and the DLL.  So as to avoid the
#  problem of there being multiple ways to generate the same generated file, care is taken in specifying how
#  the static object files are created.  i.e. the construction of the DAG regarding the object files has to
#  be explicit rather than implicit.

cFiles = Glob ( '*.c' )

def isMainFile ( fileName ) :
    with file ( str ( fileName ) ) as theFile :
        return re.compile ( 'int\s+main\s*\(' ).search ( theFile.read ( ) )

mainFiles = [ f.name for f in cFiles if isMainFile ( f ) ]

otherSources =  [ f.name for f in cFiles if ( f.name not in mainFiles ) and f.name != 'nativelauncher_wrap.c' ]
otherStaticObjects = [ environment.Object ( s ) for s in otherSources ]

executables = [ ]
for name in mainFiles :
    root = name.replace ( '.c' , '' )
    if environment['PLATFORM'] in [ 'win32' , 'cygwin' ] :
        Import ( 'windowsEnvironment' )
        objects = [ environment.Object ( name ) ] + otherStaticObjects
        #  SCons does not provide the RES builder for the Cygwin toolchain. cf. Scons Bug 2077.
        if environment['PLATFORM'] == 'cygwin' :
            resources = environment.Command ( name + '.coff' , root + '.rc' , 'windres $SOURCES -I source -O coff $TARGET' )
        else :
            resources = environment.RES ( target = root + '.coff' , source = root + '.rc' )
        executables += [
            environment.Program ( root + '.exe' , objects + [ resources ] ) ,
            windowsEnvironment.Program ( root + 'w.exe' , objects + [ resources ] )
            ]
    else :
        executables += environment.Program ( root , [ name ] + otherStaticObjects )

returnValue = ( executables ,
                swigEnvironment.SharedLibrary ( '_nativelauncher' ,
                        ( otherStaticObjects if environment['PLATFORM'] in [ 'win32' , 'cygwin' ] else otherSources ) + [ 'nativelauncher.i' ] )
                )

Return ( 'returnValue' )
