# -*- mode:python encoding:UTF-8 -*-
# jedit: :mode=python:

#  Groovy -- A native launcher for Groovy
#
#  Copyright Â© 2007-8 Russel Winder
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
#  compliance with the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software distributed under the License is
#  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#  implied. See the License for the specific language governing permissions and limitations under the
#  License.
#
#  Author : Russel Winder <russel@russel.org.uk>
#  $Revision$
#  $Date$

import os

Import ( 'environment' )

debug = eval ( ARGUMENTS.get ( 'debug' , 'False' ) )
if debug :
    if environment['CC'] == 'cl' :
        environment.Append ( CCFLAGS = '-Zi' )
    else :
        environment.Append ( CCFLAGS = '-g' )

cygwinCompile = eval ( ARGUMENTS.get ( 'cygwinCompile' , 'False' ) )
if cygwinCompile :
    if environment['PLATFORM'] in [ 'Windows' , 'mingw' , 'cygwin' ] :
        environment.Append ( CCFLAGS = '-D_cwcompat' )

sources = Glob ( '*.c' )

try :
    javaHome = os.environ['JAVA_HOME']
except :
    javaHome = '' 
if javaHome == '' :
    if environment['PLATFORM'] == 'darwin' :
        putativeDirectory = '/System/Library/Frameworks/JavaVM.framework'
        if os.path.isdir ( putativeDirectory ) :
            javaHome = putativeDirectory
            environment.Append ( CPPFLAGS = ' -I"%s/Headers"' % ( javaHome ) )
        else : raise Exception , 'JAVA_HOME not defined and %s not found.' % ( putativeDirectory )
    else : raise Exception , 'JAVA_HOME not defined.'

if environment['PLATFORM'] == 'cygwin' :
    javaHome = os.popen ( 'cygpath --unix "' + javaHome + '"' ).read ( ).strip ( )
    environment.Append ( CCFLAGS = ' -mno-cygwin' , LINKFLAGS = ' -s -mno-cygwin -mwindows' )

if environment['PLATFORM'] == 'darwin' :
    environment.Append ( LINKFLAGS = '-framework CoreFoundation' )

#  Map from uname operating system names to include directory names.
includeDirectoryName = {
    'Linux' : 'linux' ,
    'SunOS' : 'solaris' ,
    'Darwin' : 'darwin' ,
    'CYGWIN_NT-5.1' : 'win32' ,
    'MINGW32_NT-5.1' : 'win32' ,
    'Windows' : 'win32'
    }

environment.Append ( CPPFLAGS = ' -I"%s" -I"%s"' % ( os.path.join ( javaHome , 'include'  , includeDirectoryName [ environment[ 'Architecture' ] ] ) , os.path.join ( javaHome , 'include' ) ) )
if environment['CC'] == 'cl' :
    # -Wall produces screenfulls of useless warnings about win header files unless the following warnings are omitted:
    # c4255 == 'function' : no function prototype given: converting '()' to '(void)'
    # c4668 == 'symbol' is not defined as a preprocessor macro, replacing with '0' for 'directives'
    # c4820 == padding added into a struct 
    # This one is disabled as there's a lot of this done intentionally (and there seems to be no way to tell cl that it's intentional):
    # c4706 == assignment in conditional expression
    # this one's disabled as it does not seem very interesting:
    # c4711 == function 'function' selected for inline expansion
    # the -MD option is important - it is required when using JNI. 
    # See e.g. http://java.sun.com/docs/books/jni/html/start.html#27008 and
    #          http://java.sun.com/docs/books/jni/html/invoke.html#28755
    # the -O1 is there just to reduce the size of the executable - it is not mandatory
    environment.Append ( CCFLAGS = '-O1 -Wall -wd4255 -wd4668 -wd4706 -wd4711 -wd4820 -nologo -c -MD -DWIN32_LEAN_AND_MEAN -DVC_EXTRALEAN' ,
                         LINKFLAGS = '-nologo -subsystem:console' , LIBS = [ 'advapi32.lib ' ] )
else :
    assert environment['CC'] == 'gcc'
    environment.Append ( CCFLAGS = ' -O3 -W -Wall -Wundef -Wcast-align -Wno-unused-parameter -Wshadow -Wredundant-decls' )

if environment['Architecture'] in [ 'Linux' ] : environment.Append ( LIBS = 'dl' )

if environment['PLATFORM'] in [ 'Windows' , 'mingw' , 'cygwin' ] :
    if environment['PLATFORM'] == 'Windows' :
        resources = Command ( environment['Name'] + '.res' , environment['Name'] + '.rc' , 'rc -fo $SOURCE $TARGET' )
    else :
        resources = Command ( environment['Name'] + '.coff' , environment['Name'] + '.rc' , 'windres -O coff --include-dir source $SOURCE $TARGET' )
    returnValue = environment.Program ( environment['Name'] + '.exe' , sources + [ resources ] )
else :
    returnValue = environment.Program ( environment['Name'] , sources )

Return ( 'returnValue' )
