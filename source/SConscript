# -*- mode:python coding:utf-8 -*-
# jedit: :mode=python:

#  Groovy -- A native launcher for Groovy
#
#  Copyright Â© 2007-8 Russel Winder
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
#  compliance with the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software distributed under the License is
#  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#  implied. See the License for the specific language governing permissions and limitations under the
#  License.
#
#  Author : Russel Winder <russel.winder@concertant.com>
#  $Revision$
#  $Date$

import os
import re

Import ( 'environment' )

debug = eval ( ARGUMENTS.get ( 'debug' , 'False' ) )
if debug :
    if environment['CC'] == 'cl' :
        environment.Append ( CCFLAGS = '-Zi' )
    elif environment['CC'] == 'gcc' :
        environment.Append ( CCFLAGS = '-g' )
    else :
        print 'Debug mode not set up for compiler' , environment['CC']
        Exit ( 1 )
else :
    environment.Append ( CCFLAGS = '-DNDEBUG' )
    if environment['CC'] == 'cl' :
        pass
    elif environment['CC'] == 'gcc' :
        #  The Mac OS X ld does not understand long options, and only allows stripping on 32-bit builds.
        #  The Solaris GCC appears to use the Sun ld if present rathe than the ld in binutils.
        environment.Append ( LINKFLAGS = '-Wl,-s' )
    else :
        print 'Strip mode not set for compiler' , environment['CC']

cygwinCompile = eval ( ARGUMENTS.get ( 'cygwinCompile' , 'True' ) )
if cygwinCompile :
    if environment['PLATFORM'] in [ 'Windows' , 'mingw' , 'cygwin' ] :
        environment.Append ( CCFLAGS = '-D_cwcompat' )

extraMacrosString = ARGUMENTS.get ( 'extramacros' , '' )
for macro in extraMacrosString.split ( ) :
    environment.Append ( CCFLAGS = '-D' + macro )

try :
    javaHome = os.environ['JAVA_HOME']
except :
    javaHome = '' 
if javaHome == '' :
    if environment['PLATFORM'] == 'darwin' :
        putativeDirectory = '/System/Library/Frameworks/JavaVM.framework'
        if os.path.isdir ( putativeDirectory ) :
            javaHome = putativeDirectory
            environment.Append ( CPPFLAGS = ' -I"%s/Headers"' % ( javaHome ) )
        else : raise Exception , 'JAVA_HOME not defined and %s not found.' % ( putativeDirectory )
    else : raise Exception , 'JAVA_HOME not defined.'

if environment['PLATFORM'] == 'cygwin' :
    javaHome = os.popen ( 'cygpath --unix "' + javaHome + '"' ).read ( ).strip ( )
    environment.Append ( CCFLAGS = ' -mno-cygwin' , LINKFLAGS = ' -s -mno-cygwin' )
    windowsEnvironment = environment.Clone ( )
    windowsEnvironment.Append ( LINKFLAGS = '-mwindows' )

if environment['PLATFORM'] == 'darwin' :
    environment.Append ( LINKFLAGS = '-framework CoreFoundation' )

#  Map from uname operating system names (environment['Architecture']) to include directory names.
includeDirectoryName = {
    'Linux' : 'linux' ,
    'SunOS' : 'solaris' ,
    'Darwin' : 'darwin' ,
    'CYGWIN_NT-5.1' : 'win32' ,
    'MINGW32_NT-5.1' : 'win32' ,
    'Windows' : 'win32'
    }

environment.Append ( CPPFLAGS = ' -I"%s" -I"%s"' % ( os.path.join ( javaHome , 'include'  , includeDirectoryName [ environment[ 'Architecture' ] ] ) , os.path.join ( javaHome , 'include' ) ) )
if environment['CC'] == 'cl' :
    # -Wall produces screenfulls of useless warnings about win header files unless the following warnings are omitted:
    # c4206 == translation unit is empty (if not compiling cygwin compatible binary, jst_cygwincompatibility.c is empty)
    # c4255 == 'function' : no function prototype given: converting '()' to '(void)'
    # c4668 == 'symbol' is not defined as a preprocessor macro, replacing with '0' for 'directives'
    # c4820 == padding added into a struct 
    # This one is disabled as there's a lot of this done intentionally (and there seems to be no way to tell cl that it's intentional):
    # c4706 == assignment in conditional expression
    # this one's disabled as it does not seem very interesting:
    # c4711 == function 'function' selected for inline expansion
    #
    # the -MD option is important - it is required when using JNI. 
    # See e.g. http://java.sun.com/docs/books/jni/html/start.html#27008 and
    #          http://java.sun.com/docs/books/jni/html/invoke.html#28755
    #
    # The produced executable is quite small at any rate, so the compiler optimization
    # options are chosen so that the executable is as fast as possible.
    #
    # TODO: once scons supports visual studio 2008, add a conditional so that -Og is only used when visual studio version < 9.0 as in 
    #       9.0 this option is deprecated. I've only tested on 7.1 and 9.0 and it got deprecated somewhere between...
    environment.Append (
        CCFLAGS = '-TC -O2 -Ot -Ox -Og -Wall -Wp64 -wd4206 -wd4255 -wd4668 -wd4706 -wd4711 -wd4820 -MD -DWIN32_LEAN_AND_MEAN -DVC_EXTRALEAN' ,
        LINKFLAGS = '-opt:ref -opt:nowin98' ,
        LIBS = [ 'advapi32', 'msvcrt' ] )
    windowsEnvironment = environment.Clone ( )
    windowsEnvironment.Append ( LINKFLAGS = '-subsystem:windows -entry:mainCRTStartup' )
    environment.Append ( LINKFLAGS = '-subsystem:console' )
elif environment['CC'] == 'gcc' :
    #  Cygwin specific options were set earlier.
    environment.Append ( CCFLAGS = ' -O3 -W -Wall -Wundef -Wcast-align -Wno-unused-parameter -Wshadow -Wredundant-decls' )
    if environment['PLATFORM'] == 'win32' :
        # TODO:  Find out what the right options are here for the MinGW GCC.
        windowsEnvironment = environment.Clone ( )
        windowsEnvironment.Append ( LINKFLAGS = '-mwindows' )
else :
    print 'Assuming default options for compiler' , environment['CC']

if environment['Architecture'] in [ 'Linux' ] : environment.Append ( LIBS = 'dl' )

#  Search for any file with what appears to be a main function and assume that file is the main file of an
#  application to be built.  Assume all other source files should be compiled and linked with each of the
#  main files.  Return a list of all the executables made.

mainFiles = [ ]
mainFunctionPattern = re.compile ( 'int\s+main\s*\(' )
for f in Glob ( '*.c' ) :
    theFile = file ( str ( f ) )
    try :
        theText = theFile.read ( )
    except IOError :
        print '########  Error reading' , str ( f )
    else :
        if mainFunctionPattern.search ( theText ) : mainFiles.append ( f.name )
    finally :
        theFile.close ( )
otherSources =  [ f.name for f in Glob ( '*.c' ) if f.name not in mainFiles ]
returnValue = [ ]
for name in mainFiles :
    root = name.replace ( '.c' , '' )
    sources =  [ name ] + otherSources
    if environment['PLATFORM'] in [ 'win32' , 'cygwin' ] :
        #  Two different links for the same objects so split into two stages.
        objects = environment.Object ( sources )
        #  SCons does not provide the RES builder for the Cygwin toolchain. cf. Scons Bug 2077.
        if environment['PLATFORM'] == 'cygwin' :
            resources = environment.Command ( name + '.coff' , root + '.rc' , 'windres $SOURCES -I source -O coff $TARGET' )
        else :
            resources = environment.RES ( target = root + '.coff' , source = root + '.rc' )
        returnValue += [
            environment.Program ( root + '.exe' , objects + [ resources ] ) ,
            windowsEnvironment.Program ( root + 'w.exe' , objects + [ resources ] ) ]
    else :
        returnValue += environment.Program ( root , sources )

Return ( 'returnValue' )
