# -*- mode: ruby encoding: UTF-8 -*-

#  Groovy -- A native launcher for Groovy
#
#  Copyright Â© 2006 Russel Winder
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
#  compliance with the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software distributed under the License is
#  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#  implied. See the License for the specific language governing permissions and limitations under the
#  License.
#
#  Author : Russel Winder <russel@russel.org.uk>
#  $Revision$
#  $Date$

import 'c/dependencies'

BuildDirectory = Environment[ 'BuildDirectory' ] + '/' + rant.current_subdir
Program = BuildDirectory + '/' + Environment[ 'Name' ]
Source = sys[ '*.c' ]

$cppFlags = ''
$cFlags = ''
$libs = ''

if Environment[ 'Architecture' ] == Solaris
  $cppFlags += ' -Dsls '
elsif Environment[ 'Architecture' ] == Linux
  $cppFlags += ' -Dlnx '
end

if Environment[ 'Architecture' ] == Solaris || Environment[ 'Architecture' ] == Linux
  $cppFlags += "-I#{ENV[ 'JAVA_HOME' ]}/include/#{Environment[ 'Architecture' ]} -I#{ENV[ 'JAVA_HOME' ]}/include"
  $cFlags += '-O3 -W -Wall -Wundef -Wcast-align -Wno-unused-parameter -Wshadow -Wredundant-decls'
  $libs += '-ldl'
  def compile( target , sources ) ; "gcc #{$cppFlags} #{$cFlags} -c -o #{target} #{sources}" end
  def link( target , sources ) ; "gcc #{$cFlags} -o #{target} #{sources} #{$libs}" end
end

task :default => [ :initialize , Program ]

task :initialize do
  if ! File.directory?( BuildDirectory ) then sys.mkdir_p( BuildDirectory ) end
  DependenciesFile = BuildDirectory + '/dependencies'
  gen C::Dependencies , DependenciesFile , :search => 'source'
  gen Action do source DependenciesFile end
end

def object( source ) ; BuildDirectory + '/' + source.sub( '.c' , '.o' ) end

file Program => Source.map { | source | object( source ) } do | target | sys.sh( link( target.name , target.prerequisites ) ) end

Source.each { | source |
  file object( source ) => source do | target | sys.sh( compile( target.name , target.prerequisites ) ) end
}
