# -*- mode: ruby encoding: UTF-8 -*-

#  Groovy -- A native launcher for Groovy
#
#  Copyright Â© 2006 Russel Winder
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
#  compliance with the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software distributed under the License is
#  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#  implied. See the License for the specific language governing permissions and limitations under the
#  License.
#
#  Author : Russel Winder <russel@russel.org.uk>
#  $Revision$
#  $Date$

import 'c/dependencies'

BuildDirectory = '../' + Environment[ 'BuildDirectory' ] + '/' + rant.current_subdir
Program = BuildDirectory + '/' + Environment[ 'Name' ]
Source = sys[ '*.c' ]

$javaHome = ENV[ 'JAVA_HOME' ]
if $javaHome == nil || $javaHome == '' then raise "JAVA_HOME not defined." end

# Assume a default of GCC since most of the systems we are checking use this.

$gcc = 'gcc'
$cppFlags = "-I'#{$javaHome}/include/#{Environment[ 'Architecture' ]}' -I'#{$javaHome}/include'"
$cFlags = '-O3 -W -Wall -Wundef -Wcast-align -Wno-unused-parameter -Wshadow -Wredundant-decls'
$libs = '-ldl'

def compileCommand( target , sources ) ; "#{$gcc} #{$cppFlags} #{$cFlags} -c -o #{target} #{sources}" end
def linkCommand( target , sources ) ; "#{$gcc} #{$cFlags} -o #{target} #{sources} #{$libs}" end

case Environment[ 'Architecture' ]
when Solaris
#  $cppFlags += ' -Dsls '
when Linux
#  $cppFlags += ' -Dlnx '
when Cygwin
  $gcc = '/cygdrive/c/MinGW/bin/mingw32-gcc'
  $cppFlags = " -I'#{$javaHome}\\include' -I'#{$javaHome}\\include\\win32'"
  def compileCommand( target , sources ) ; "#{$gcc} #{$cppFlags} #{$cFlags} -c -o `cygpath -w #{target}` #{sources}" end
  def linkCommand( target , sources ) ; "#{$gcc} #{$cFlags} -o `cygpath -w #{target}` `cygpath -w #{sources}` #{$libs}" end
when MSYS
  $javaHome = $javaHome.sub( 'Program/' , 'Program' )
  $cppFlags += " -Dwin -I'#{$javaHome}/include/win32' -I'#{$javaHome}/include'"
when Windows
  $gcc = 'cl'
  $cppFlags = "-nologo -c -Wall -MD -O1 -I #{$javaHome}\\include"
  def compileCommand( target , sources)
    "#{$gcc} -Fo#{target} #{$cppFlags} #{sources}"
  end
  def linkCommand( target , sources ) 
    "link -NOLOGO -SUBSYSTEM:CONSOLE -OUT:#{target} #{sources}" 
  end
end # TODO: groovyw.exe with /SUBSYSTEM:WINDOWS

task :default => [ :initialize , Program ]

task :initialize do
  if ! File.directory?( BuildDirectory ) then sys.mkdir_p( BuildDirectory ) end
  DependenciesFile = BuildDirectory + '/dependencies'
  gen C::Dependencies , DependenciesFile , :search => 'source'
  gen Action do source DependenciesFile end
end

def object( source ) ; BuildDirectory + '/' + source.sub( '.c' , '.o' ) end

file Program => Source.map { | source | object( source ) } do | target | 
  sys.sh( linkCommand( target.name , target.prerequisites ) ) 
end

Source.each { | source |
  file object( source ) => source do | target | 
    sys.sh( compileCommand( target.name , target.prerequisites ) ) 
  end
}

