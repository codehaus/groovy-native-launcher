# -*- mode:ruby encoding:UTF-8 -*-

#  Groovy -- A native launcher for Groovy
#
#  Copyright Â© 2006-7 Russel Winder
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
#  compliance with the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software distributed under the License is
#  distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#  implied. See the License for the specific language governing permissions and limitations under the
#  License.
#
#  Author : Russel Winder <russel@russel.org.uk>
#  $Revision$
#  $Date$

import 'clean'

#  Use the name of the architecture specific directory in ${JAVA_HOME}/include as representation.

LINUX = 'linux'
SOLARIS = 'solaris'
MAC_OS_X = 'darwin'
CYGWIN = 'cygwin'
MSYS = 'msys'
WINDOWS = 'windows'

Environment = { }

def unknownArchitecture ( ) raise "Unrecognized architecture -- #{Architecture}" end

begin
  Environment[ 'Architecture' ] = case `uname -s`
                                  when /Linux/ then LINUX
                                  when /SunOS/ then SOLARIS
                                  when /Darwin/ then MAC_OS_X   
                                  when /CYGWIN/ then CYGWIN
                                  when /MINGW32/ then MSYS  
                                  else
                                    unknownArchitecture
                                  end
rescue
  if ENV[ 'WINDIR' ]
    Environment[ 'Architecture' ] = WINDOWS
  else
    unknownArchitecture
  end
end

Environment[ 'Name' ] = 'groovy'
begin
  Environment[ 'BuildDirectory' ] = "build_rant_#{Environment[ 'Architecture' ]}.#{`uname -m`.strip( )}"
rescue
  Environment[ 'BuildDirectory' ] = "build_rant_#{Environment[ 'Architecture' ]}"
end

desc 'Clean everything.'
gen Clean , :clean
var[ :clean ].include( [ Environment[ 'BuildDirectory' ] , '**/*~' ] )

subdirs [ 'source' ]

desc 'Compile and link.'
task :compile => 'source/compile'

desc 'Compile and link setting debug flags as needed.'
task :debug   => 'source/debug'

task :default => :compile
