# This file contains plans for how specifications for a code generator
# generating a java launcher might look like. The generator is still
# vaporware, so this file does not do anything yet. = )

# the sequence of actions:

# 1. cygwin path conversions, if applicable
# 2. Figuring out javahome to use
# 3. Getting values for artificial java program parameters and system properties

# TODO:
#  - way to specify certain specifications to apply to multiple executables to 
#    avoid copy-pasting

# for each executable, make an entry w/ the executable name as key
groovy :
  general :
    main class : org.codehaus.groovy.tools.GroovyStarter
    # optional
    # if this list is provided, these options are recognized by the launcher so that if given,
    # the actual java program is not launched at all but help msg is printed
    help options :
      # if the option has several names, one of them is sufficient to mention here
      - -h
    # optional
    help prologue : usage: groovy [options] [args]
    # optional
    help epilogue : >-
      In addition, you can give any parameters accepted by the jvm you are using, e.g.
      -Xmx<size> (see java -help and java -X for details)
    # defaults to "to jvm", possible other values "error", "to application"
    unrecognized options : to jvm
    # this can be used to mimic how many launch scripts allow the user to pass
    # jvm options by preceding the option name w/ e.g. a J, e.g. -JXmx200m. 
    # Useful if you want to mimic the behavior of those build scripts or 
    # there is a conflict bethween parameters 
    # defaults to none
    #jvm option prefix : 
  java program parameters and system properties :
    - 
      # set value to a launchee program parameter
      name : --conf
      # possible values: "separate value", "prefix param"
      type : separate value
      # if this value should be set as a system property at startup
      system property : groovy.conf
      value list :
        # parameter values may be referenced like this. If the parameter has 
        # several names, any one of them will do.
        - ${--conf}
        # value list may contain references to environment variables, apphome and javahome
        # Values w/ environment variables are used only if all the environment variables
        # used have a value.
        - ${GROOVY_CONF}
        # use / for file separator - it will be changed to platform specific version automatically
        - ${apphome}/conf/groovy-starter.conf
      # if no value can be given, still pass in this param?
      # possible values : no, both, system property, parameter, fail
      # defaults to no. 
      # in this case this could be left empty since the last value will always 
      # have a value.
      use even without value : fail
    -
      name : --classpath
      type : separate value
      value list :
        - ${-cp}
        - ${CLASSPATH}
    -
      name : --main
      type : separate value
      value : groovy.ui.GroovyMain
  
  # all parameters the program can accept must be defined here
  # unless the option "unrecognized parameters to" is set to "application".
  parameter specifications :
    -
      name : --conf
      # possible values: "separate value", "prefix param", "loner"
      type : separate value
      # possible values : application, jvm, nonw
      # defaults to application. If none, this parameter and its value are not passed
      # to the application or jvm nor do they cause error (unrecognized param).
      # The point with this kind of parameters is that they may be used above
      # in generating values for system properties or artificial launchee params
      pass to : none
      # if cygwin support is generated, does the value of this 
      # parameter require conversion?
      # possible values : false (default), path, path list
      # path means its value is path to a file or folder
      # path list means its a path a la PATH or CLASSPATH
      cygwin conversion : false
      # defaults to false. If true, all input parameters after this are passed 
      # to the launched program
      terminating : false
      help text : use the given groovy conf file
      # text to be printed after the param name
      help text value marker : <conf file>
      # optional
      # set jvm options :
      #   - -ea
      #   - javaagent:foo=${SOME_ENV_VAR}
      # defaults to false. 
      # This enables you to specify some parameters to have cygwin path conversion done
      # to them before starting the jvm and passing the parameters on. 
      # The significance is in that there is currently no cygwin java. Thus, 
      # you can not compile sources w/ jni headers included in cygwin (unless w/ -mno-cygwin param to gcc,
      # which means it's a regular windows app). cygwin path conversions can be done
      # from a non-cygwin executable, but this requires loading cygwin1.dll and has licence implications:
      # see http://www.cygwin.com/faq/faq.programming.html#faq.programming.msvs-mingw
      cygwin support : true
      # TODO: How to map params to mean whether to load client / server jvm?
      # mandatory. Possible values : prefer client, prefer server, server only, client only
      # You can google for the differences, but in short, client jvm is better in short running programs where startup time
      # dominates, server jvm does more runtime optimization and is faster in long running programs.
      jvm select policy : prefer client
      application home : 
        # TODO: enable specifying app home relative to exec location, a hard coded value, a registry entry
        #       Also write about security implications of using deduction of apphome relative to exec location.
      windows specific :
        #optional 
        icon file : groovy.ico
        # possible values : console, windows, both
        subsystem : both
        # if windows executable is created and this option is not given, 
        # the windows executable will have the name of the console app + "w" 
        # e.g. groovy.exe and groovyw.exe (cf java.exe, javaw.exe)
        # Give the name w/out the .exe suffix.
        # If only a windows executable is produced, this is ignored.
        # winapp name : xxx
    - 
      names : 
        - -cp
        - -classpath
        - --classpath
      pass to : none
      cygwin conversion : path list
      help text : the classpath to use
      help text value marker : <user classpath>
    -
      name : --javahome
      pass to : none
      # TODO: maybe change this to true / false - the conversion can be done w/ the same func as a single path is a special case of path list
      cygwin conversion : path
      help text : the classpath to use
      help text value marker : <user classpath>
     
      
    java runtime :
      # the classpath when jvm is started
      bootstrap classpath entries :
        # a list of values, can contain refs to env vars, javahome, apphome
        #values :
        jar dirs :
          - 
            name : ${apphome}/lib
            # defaults to false
            recursive : false
            # optional. If provided, must be valid c source code. 
            # TODO: spec the variables that can be referred to here
            # also specify which c funcs are available (via header includes)
            # You can have as many lines of code as you like. Assign the result to variable called includeInClasspath
            filter code : includeInClasspath = ( strcmp( "groovy-starter.jar", jarName ) == 0 ) || ( jarNameLen >= 8 && memcmp( "groovy-", jarName, 7) && isdigit( jarName[ 7 ] ) ) ;
      java home :
      # ${apphome} could be used here
        - ${--javahome}
        - ${JAVA_HOME}
        # special value allowed only here
        - path lookup
        # TODO: specify how windows registry keys are referred to here
      # defaults to all, possible values: sun, bea (later on ibm and friends)
      # NO SUPPORT FOR THIS YET
      # a comma separated list
      allowed vendors :
      # TODO: specify how this works (similar to eclipse plugin version dependency spec)
      required version :
      # e.g. ${JAVA_OPTS} -Xmx200m
      # note that if the same option is provided twice, the latter stands.
      # Also note that if env vars are used, they are split into several options
      # by spaces (so e.g. "-Xms100m -Xmx200m" is two jvm options, not one)
      # NOTE: when converting / to platform specific path separators, take care
      #       to convert only after : if the parameter is of the form -[a-zA-Z]+(\/::alnum::)?:
      default jvm options : ${JAVA_OPTS} -Dgroovy.home=${apphome}
      
      